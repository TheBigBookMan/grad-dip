-- Assessment 4- Ben Smerd

-- Task 1:
-- a. 

SELECT s.StoreID, s.StoreAddress, s.WeekDaysHours, s.WeekendHours,
d.DepartmentID, d.DepartmentTitle, d.NoOfEmployees, d.AccountNo, d.StoreId, d.FranchiseTeamID
FROM Store s, Department d
WHERE s.StoreID = d.StoreID
AND s.WeekendHours = (
    SELECT MAX(WeekendHours)
    FROM Store
)

-- b.
-- Was confused by the wording of the question so did it two ways

SELECT E.EName, E.EAddress
FROM Employee E
LEFT JOIN Department D
ON E.DepartmentID = D.DepartmentID
WHERE D.StoreID = 'S001';

---- OR

SELECT DISTINCT NVL(E.EName, SH.SHName) AS TeamMemberName, NVL(E.EAddress, SH.SHAddress) AS TeamMemberAddress
FROM Department D
LEFT JOIN Membership M ON D.FranchiseTeamID = M.TeamID
LEFT JOIN Shareholder SH ON SH.MemberID = M.MemberID
LEFT JOIN Full_Time_Employee FE ON FE.MemberID = M.MemberID 
LEFT JOIN Employee E ON E.EmployeeID = FE.EmployeeID
WHERE D.StoreID = 'S001'

-- c. 

SELECT FA.AppNumber, FA.AppDate, FA.DecisionDate, FA.Status, FA.DepartmentID, FA.TeamId, D.DepartmentID, D.DepartmentTitle
FROM Department D
LEFT JOIN Franchise_App FA
ON FA.DepartmentID = D.DepartmentID;

-- d. 

SELECT T.TeamID, T.TeamName, T.TeamLeaderId, FA.Status, COUNT(M.MemberID) AS NumMembersInTeam
FROM Team T
JOIN Franchise_App FA 
ON T.TeamID = FA.TeamID
LEFT JOIN Membership M
ON T.TeamID = M.TeamID
WHERE FA.Status = 'Granted'
GROUP BY T.TeamID, T.TeamName, T.TeamLeaderId, FA.Status;

e. 

SELECT AppNumber, AppDate, DecisionDate, Status, DepartmentID, TeamID, (DecisionDate - AppDate) AS DateDifference
FROM Franchise_App
ORDER BY DateDifference DESC
FETCH FIRST 1 ROW ONLY;

-- f. 

SELECT FA.DecisionDate, FA.Status, M.TeamID, T.TeamName, SH.SHID, SH.SHName, SH.SHEmail, M.MemberID, E.EmployeeID, E.EName, E.EEmail, SH.SHPhone,  E.EPhone
FROM Franchise_App FA
JOIN Membership M
ON FA.TeamID = M.TeamID
JOIN Team T ON T.TeamID = M.TeamID
LEFT JOIN Shareholder SH ON SH.MemberID = M.MemberID
LEFT JOIN Full_Time_Employee FE ON FE.MemberID = M.MemberID
LEFT JOIN Employee E ON E.EmployeeID = FE.EmployeeID
WHERE FA.Status = 'Granted';


-- g. 

SELECT  M.TeamID, M.MemberID, M.PercentageOfShare, T.TeamName, NVL(SH.SHID, E.EmployeeID) AS TeamMemberID,
NVL(SH.SHName,  E.EName) AS TeamMemberName, NVL(SH.SHEmail, E.EEmail) AS TeamMemberEmail,
NVL(SH.SHPhone, E.EPhone) AS TeamMemberPhone 
FROM Membership M
JOIN Team T ON T.TeamID = M.TeamID
LEFT JOIN Shareholder SH ON SH.MemberID = M.MemberID
LEFT JOIN Full_Time_Employee FE ON FE.MemberID = M.MemberID
LEFT JOIN Employee E ON E.EmployeeID = FE.EmployeeID
WHERE M.MemberId = (

    SELECT M1.MemberID
    FROM Membership M1
    JOIN Team T ON T.TeamID = M1.TeamID
    JOIN Department D ON D.FranchiseTeamID = T.TeamID
    JOIN Account A ON A.AccountNo = D.AccountNo
    WHERE (M1.PercentageOfShare / 100) * A.Balance = (

        SELECT MAX((M1.PercentageOfShare / 100) * A.Balance) AS MemberCredit
        FROM Membership M1
        JOIN Team T ON T.TeamID = M1.TeamID
        LEFT JOIN Department D ON D.FranchiseTeamID = T.TeamID
        LEFT JOIN Account A ON A.AccountNo = D.AccountNo
    )
);

-- h. 

SELECT E.EName, COALESCE(PE.Salary, FE.Salary, (CE.HourlyRate * 12 * 45)) AS SalaryEarned
FROM Employee E
LEFT JOIN Full_Time_Employee FE ON E.EmployeeID = FE.EmployeeID
LEFT JOIN Part_Time_Employee PE ON E.EmployeeID = PE.EmployeeID
LEFT JOIN Casual_Employee CE ON E.EmployeeID = CE.EmployeeID
ORDER BY SalaryEarned DESC
FETCH FIRST 4 ROW ONLY;


-- TASK 2
-- a.

-- Implement-
CREATE OR REPLACE PROCEDURE updateCommission(
	p_Date1 DATE,
	p_Date2 DATE 
) 
AS
CURSOR ReportDetails IS
	SELECT ReportID, ComAmount, ComRate, SaleAmount, StartDate
	FROM Weekly_Sales_Report
    WHERE StartDate BETWEEN p_Date1 AND p_Date2;

    NewComAmount NUMBER;
BEGIN

    FOR ptr IN ReportDetails LOOP
        NewComAmount := (ptr.SaleAmount * ptr.ComRate / 100);
        
        UPDATE Weekly_Sales_Report SET ComAmount = NewComAmount
        WHERE ReportID = ptr.ReportID;

        DBMS_OUTPUT.PUT_LINE('The commission amount for report ' || ptr.ReportID || ' has been updated to ' || NewComAmount || ' dollars, which is ' || ptr.ComRate || '% of the total sale amount of ' || ptr.SaleAmount || ' dollars.');

    END LOOP;

END updateCommission;
/

-- Test Execute-
BEGIN
	updateCommission(TO_DATE('02-Apr-2018', 'DD-Mon-YYYY'), TO_DATE('11-Apr-2018', 'DD-Mon-YYYY'));
END;
/

-- b. 

-- Implement-

CREATE OR REPLACE PROCEDURE employeeDetails(
	p_EmployeeID Employee.EmployeeID%TYPE
)
AS
CURSOR DepartmentDetails IS
    SELECT D.DepartmentID, D.DepartmentTitle, D.NoOfEmployees, D.AccountNo, 
    D.StoreID, D.FranchiseTeamID, E.EmployeeID, E.EName
    FROM Department D, Employee E
    WHERE D.DepartmentID = E.DepartmentID
    AND E.EmployeeID = p_EmployeeID;

v_BossID Employee.EmployeeID%TYPE;
v_BossPercentageShare Membership.PercentageOfShare%TYPE;
v_BossName Employee.EName%TYPE;
v_BossEmail Employee.EEmail%TYPE;
v_BossPhone Employee.EPhone%TYPE;
v_BossAddress Employee.EAddress%TYPE;

v_BossDOB Employee.EDOB%TYPE;
v_BossGender Employee.EGender%TYPE;
v_BossJoinDate Employee.JoiningDate%TYPE;

v_BossNumShares Shareholder.NoOfShares%TYPE;

v_isFullTimeEmployee CHAR(1);

v_DepartmentID Department.DepartmentID%TYPE;
v_DepartmentTitle Department.DepartmentTitle%TYPE;
v_DepartmentNumEmployees Department.NoOfEmployees%TYPE;
v_DepartmentAccountNo Department.AccountNo%TYPE;
v_DepartmentStoreID Department.StoreID%TYPE;
v_DepartmentFranchiseTeamID Department.FranchiseTeamID%TYPE;
v_EmployeeID Employee.EmployeeID%TYPE;
v_EmployeeName Employee.EName%TYPE;

BEGIN

    OPEN DepartmentDetails;
    FETCH DepartmentDetails INTO v_DepartmentID, v_DepartmentTitle, v_DepartmentNumEmployees, v_DepartmentAccountNo, 
    v_DepartmentStoreID, v_DepartmentFranchiseTeamID, v_EmployeeID, v_EmployeeName;

    SELECT M.MemberID, M.PercentageOfShare
    INTO v_BossID, v_BossPercentageShare
    FROM Membership M
    JOIN Department D ON D.FranchiseTeamID = M.TeamID
    WHERE D.DepartmentID = v_DepartmentID
    AND M.PercentageOfShare = (
        SELECT MAX(M.PercentageOfShare)
        FROM Membership M
        JOIN Department D ON D.FranchiseTeamID = M.TeamID
        WHERE DepartmentID = v_DepartmentID
    );

    SELECT COUNT(*)
    INTO v_isFullTimeEmployee
    FROM Full_Time_Employee
    WHERE MemberID = v_BossID;

    IF v_isFullTimeEmployee > 0 THEN

        SELECT E.EName, E.EPhone, E.EEmail, E.EDOB, E.EGender, E.JoiningDate
        INTO v_BossName, v_BossPhone, v_BossEmail, v_BossDOB, v_BossGender, v_BossJoinDate
        FROM Membership M
        JOIN Full_Time_Employee FE ON M.MemberID = FE.MemberID
        JOIN Employee E ON E.EmployeeID = FE.EmployeeID
        WHERE M.MemberID = v_BossID;

        DBMS_OUTPUT.PUT_LINE('Boss is a Full Time Employee');
        DBMS_OUTPUT.PUT_LINE('DepartmentID: ' || v_DepartmentID);
        DBMS_OUTPUT.PUT_LINE('Department Title: ' || v_DepartmentTitle);
        DBMS_OUTPUT.PUT_LINE('Department Number of Employees: ' || v_DepartmentNumEmployees);
        DBMS_OUTPUT.PUT_LINE('Department Account No: ' || v_DepartmentAccountNo);
        DBMS_OUTPUT.PUT_LINE('Store ID: ' || v_DepartmentStoreID);
        DBMS_OUTPUT.PUT_LINE('Franchise Team ID of Department: ' || v_DepartmentFranchiseTeamID);
        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || v_EmployeeID);
        DBMS_OUTPUT.PUT_LINE('Employee Name: ' || v_EmployeeName);

        DBMS_OUTPUT.PUT_LINE('Boss ID: ' || v_BossID);
        DBMS_OUTPUT.PUT_LINE('Boss Name: ' || v_BossName);
        DBMS_OUTPUT.PUT_LINE('Boss Email: ' || v_BossEmail);
        DBMS_OUTPUT.PUT_LINE('Boss Phone: ' || v_BossPhone);
        DBMS_OUTPUT.PUT_LINE('Boss DOB: ' || v_BossDOB);
        DBMS_OUTPUT.PUT_LINE('Boss Gender: ' || v_BossGender);
        DBMS_OUTPUT.PUT_LINE('Boss Joining Date: ' || v_BossJoinDate);
        
    ELSE 

        SELECT SH.SHName, SH.SHPhone, SH.SHEmail, SH.SHAddress, SH.NoOfShares
        INTO v_BossName, v_BossPhone, v_BossEmail, v_BossAddress, v_BossNumShares
        FROM Membership M
        JOIN Shareholder SH ON M.MemberID = SH.MemberID
        WHERE M.MemberID = v_BossID;

        DBMS_OUTPUT.PUT_LINE('Boss is a Shareholder');
        DBMS_OUTPUT.PUT_LINE('DepartmentID: ' || v_DepartmentID);
        DBMS_OUTPUT.PUT_LINE('Department Title: ' || v_DepartmentTitle);
        DBMS_OUTPUT.PUT_LINE('Department Number of Employees: ' || v_DepartmentNumEmployees);
        DBMS_OUTPUT.PUT_LINE('Department Account No: ' || v_DepartmentAccountNo);
        DBMS_OUTPUT.PUT_LINE('Store ID: ' || v_DepartmentStoreID);
        DBMS_OUTPUT.PUT_LINE('Franchise Team ID of Department: ' || v_DepartmentFranchiseTeamID);
        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || v_EmployeeID);
        DBMS_OUTPUT.PUT_LINE('Employee Name: ' || v_EmployeeName);

        DBMS_OUTPUT.PUT_LINE('Boss ID: ' || v_BossID);
        DBMS_OUTPUT.PUT_LINE('Boss Name: ' || v_BossName);
        DBMS_OUTPUT.PUT_LINE('Boss Email: ' || v_BossEmail);
        DBMS_OUTPUT.PUT_LINE('Boss Phone: ' || v_BossPhone);
        DBMS_OUTPUT.PUT_LINE('Boss Address: ' || v_BossAddress);
        DBMS_OUTPUT.PUT_LINE('Boss Num Of Shares: ' || v_BossNumShares);

    END IF;

END employeeDetails;
/

-- Test Execute- uncomment out which one to test, either shareholder boss or full time employee boss
BEGIN
-- shareholder boss
    -- employeeDetails('E027');

    -- full-time-employee
    employeeDetails('E055');

END employeeDetails;
/

-- c. 

-- Implement-
CREATE OR REPLACE FUNCTION employeeBonus(
    p_EmployeeID Employee.EmployeeID%TYPE,
    p_PerformanceDate DATE
)
RETURN NUMBER IS

v_EmployeeBonus Weekly_Sales_Report.EBonus%TYPE;

BEGIN

    SELECT SUM(EBonus)
    INTO v_EmployeeBonus
    FROM Weekly_Sales_Report
    WHERE TO_DATE(TO_CHAR(p_PerformanceDate, 'Mon-YYYY'), 'Mon-YYYY') 
    BETWEEN TO_DATE(TO_CHAR(StartDate, 'Mon-YYYY'), 'Mon-YYYY')
    AND TO_DATE(TO_CHAR(EndDate, 'Mon-YYYY'), 'Mon-YYYY')
    AND EmployeeID = p_EmployeeID;
    
    IF v_EmployeeBonus > 0 THEN
        RETURN v_EmployeeBonus;
    ELSE
        RETURN 0;
    END IF;

END employeeBonus;
/


CREATE OR REPLACE PROCEDURE getEmployeeBonusAmount(
    p_EmployeeID Employee.EmployeeID%TYPE,
    p_Month DATE
) AS

v_EmployeeName Employee.EName%TYPE;
v_BonusTotal NUMBER;
v_MonthName VARCHAR2(10);

BEGIN

    SELECT EName, employeeBonus(p_EmployeeID, p_Month)
    INTO v_EmployeeName, v_BonusTotal
    FROM Employee
    WHERE EmployeeID = p_EmployeeID;

    DBMS_OUTPUT.PUT_LINE('The employee named ' || v_EmployeeName || ' has earned a total bonus amount of ' || v_BonusTotal ||
    ' for the month of ' || to_char(p_Month, 'Month') || ' by making outstanding sales.');

END getEmployeeBonusAmount;
/

-- Execute
BEGIN

    getEmployeeBonusAmount('E004', TO_DATE('01-Apr-2018', 'DD-MON-YYYY'));

END;


-- Task 3.
-- a. 

-- Implement

CREATE OR REPLACE TRIGGER fullTimeEmployeeExpCheck
BEFORE INSERT ON Franchise_App FOR EACH ROW
DECLARE

    CURSOR Team_Members IS
    SELECT MemberID
    FROM Membership
    WHERE TeamID = :NEW.TeamID;

    v_FTEmployeeJoiningDate Employee.JoiningDate%TYPE; 
    v_currentDate DATE;

BEGIN
    FOR member IN Team_Members LOOP
        v_currentDate := SYSDATE;

        SELECT E.JoiningDate
        INTO v_FTEmployeeJoiningDate
        FROM Employee E
        LEFT JOIN Full_Time_Employee FE ON FE.EmployeeID = E.EmployeeID
        LEFT JOIN Membership M ON M.MemberID = FE.MemberID
        WHERE M.MemberID = member.MemberID
        AND TeamID = :NEW.TeamID;

        IF EXTRACT(YEAR FROM v_currentDate) - EXTRACT(YEAR FROM v_FTEmployeeJoiningDate) >= 10 THEN
            DBMS_OUTPUT.PUT_LINE('Current date is approximately 10 years or more from ' || v_FTEmployeeJoiningDate);
        
        ELSE 
            RAISE_APPLICATION_ERROR(-20001, 'Validation failed for ' || member.MemberID || ' as they have not worked here for 10 years or more.');
        END IF;

    END LOOP;

END fullTimeEmployeeExpCheck;
/

-- DML Statement to INSERT and check if it was created or not

INSERT INTO Franchise_App (AppNumber, DepartmentID, TeamID)
VALUES('testno', 'D023', 'T014');

SELECT * FROM Franchise_App WHERE AppNumber = 'testno';


-- b. 

-- Create BackupReport Table

CREATE TABLE BackupReport(
    ReportID VARCHAR2(10) NOT NULL, 
    StartDate DATE, 
    EndDate DATE, 
    SaleAmount NUMBER(8, 2),
    PRIMARY KEY (ReportID)
);

-- Implement

CREATE OR REPLACE TRIGGER backUpSalesReport
AFTER INSERT ON Weekly_Sales_report FOR EACH ROW

DECLARE

    v_numReports NUMBER;

    v_oldReportID Weekly_Sales_Report.ReportID%TYPE;
    v_oldReportStartDate Weekly_Sales_Report.StartDate%TYPE;
    v_oldReportEndDate Weekly_Sales_Report.EndDate%TYPE;
    v_oldReportSaleAmount Weekly_Sales_Report.SaleAmount%TYPE;

BEGIN

    SELECT COUNT(*)
    INTO v_numReports
    FROM Weekly_Sales_Report
    WHERE DepartmentID = :NEW.DepartmentID;

    IF v_numReports > 30 THEN

        SELECT ReportID, StartDate, EndDate, SaleAmount
        INTO v_oldReportID, v_oldReportStartDate, v_oldReportEndDate, v_oldReportSaleAmount
        FROM Weekly_Sales_Report
        WHERE DepartmentID = :NEW.DepartmentID
        AND StartDate = (
            SELECT MIN(StartDate)
            FROM Weekly_Sales_Report
            WHERE DepartmentID = :NEW.DepartmentID
        );

        INSERT INTO BackupReport
        VALUES(v_oldReportID, v_oldReportStartDate, v_oldReportEndDate, v_oldReportSaleAmount);

    END IF;

END backUpSalesReport;
/

-- DML Query
INSERT INTO Weekly_Sales_Report(ReportID, StartDate, EndDate, SaleAmount, DepartmentID)
VALUES('test100', TO_DATE('01-Mar-2013', 'DD-Mon-YYYY'), TO_DATE('08-Mar-2013', 'DD-Mon-YYYY'), 230000, 'D001');